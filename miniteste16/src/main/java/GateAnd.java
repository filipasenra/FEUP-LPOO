public class GateAnd extends LogicGate  {

    public GateAnd(LogicVariable output, LogicVariable input1, LogicVariable input2) throws Exception {

        if(output.getCalculatedBy() != null)
            throw new ColisionException();


        //Makes sure that the inputs are not generated by the output variable
        if (input1.getCalculatedBy() != null) {
            LogicVariable[] variablesInput1 = input1.getCalculatedBy().getInputs();
            for (LogicVariable variable : variablesInput1) {
                if (variable.equals(output))
                    throw new CycleException();
            }
        }

        if (input2.getCalculatedBy() != null) {
            LogicVariable[] variablesInput2 = input2.getCalculatedBy().getInputs();

            for (LogicVariable variable : variablesInput2) {
                if (variable.equals(output))
                    throw new CycleException();
            }
        }

        this.output = output;
        this.output.setLogicGate(this);

        this.inputs = new LogicVariable[]{input1, input2};

        this.updateValue();
    }

    @Override
    String getSymbol() {
        return "AND";
    }

    @Override
    String getFormula() {
        return "AND(" + this.inputs[0].getFormula() + "," + this.inputs[1].getFormula() + ")";
    }

    @Override
    void updateValue()
    {
        this.output.setValue(this.inputs[0].getValue() && this.inputs[1].getValue());
    }
}
